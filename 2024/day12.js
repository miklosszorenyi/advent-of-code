const test_input = [
  'RRRRIICCFF',
  'RRRRIICCCF',
  'VVRRRCCFFF',
  'VVRCCCJFFF',
  'VVVVCJJCFE',
  'VVIVCCJJEE',
  'VVIIICJJEE',
  'MIIIIIJJEE',
  'MIIISIJEEE',
  'MMMISSJEEE',
  // 'AAA..A..AAA',
  // '..AAAAAAA.',
];

const final_input = [
  'ZZZZPPDDDDDDDDDDDGPPPPPPPPPPZZZZZZXXXXXXXXXXXXXQQQQYYXYUUUFBBBBBBBDDDDDDDDDDDDCCNNNNOOOORUUUUUUUUUUUDZZZZZZZVVCCCCCCCCCCCCCCCCCCCCLLLLQQQQQQ',
  'ZZZZPPPDDDDDDDDDDPPPPPPPPPPPPPZZXXXXXXXXXXXXXXXYQYQQYYYYUUFBBBBBBDDDDDDDDDDDDDDDNNNOOOOOUUUUUUUUUUUUUZZZZZZZVZCCCCCCCCCCCCCCCCCCCLLLLLQQQQQQ',
  'PPPPPPDDDDDDDDDDDDPPPPPPPPPPPSZZZXXXXXXXXXXXXXYYYYYQYBYYFUFBBBBBBBDDDDDDDDDDDDDDNNNOOOOOOUUUUUUUUUUUURZZZZZZZZZCCCCCCCCGGCCCCCCCCCLLLLLLLLQQ',
  'PPPPPPDDDDDDDDDDDPPPPPPPPPPPZZZZOXXXXXXXXXXXYYYYYYYYYYYYFFFBBBBBBBBDDDDDDDDDDKDDONNNOOOOOUUUUUUUUUUUUUZZZZZZZZCCCCCCCCCGGGGCCCCLCLLLLLLLLLQQ',
  'PPPPPPDDDDDDGGGGGPPPPPPPPPPPPZZXXXXXXXXXXXXXYYYYYYYYYYYYFFFBBBBBBBBDDDDDDDDDDDOOOWWFOOOOUUUUUUUUUUUUUUZZZZZCCCCCCCCCCCCGGGGGCCCLLLLLLLLLLLQQ',
  'PPPPPPPDDDDDGGGGGPPPGGGGGGGZZZZZXXXXXXXXYYYYPYYYYYYYYYYFFFFFFBBBBBBBDDDDDDDDDYWWWWWWOOOOUUUUUUUUUUUBBUZZCCCCCCCCCCCCCGGGGGHHLLCLLLLLLLLLLLLL',
  'PPPPPPPPZZZDGGGGGDPPGGGGGGGZZZZXXXXXXXXXXYFYYYYYYYYYYYYFFFFMMMMMMMMMDDDNDDDDDYYWWWWOOOOOUMUUUKUUUUUUUUJCCCCCCCCCCCCCCNGGGGHHHLLLLLLLLLLLLLLK',
  'PPPPPPPPQZZDGGGGGDPPGGGGGGGZZZZZXXXXXXXXXYYYYYYYYYYYYVVFFFFMMMMMMMMMDDNYYYYYDYYWWWWOOOOOTMUUUUUUUUUUUJJCCCCCCCCCCCCCCGGGGGHHHLLLLLLLLLLLLLLK',
  'PPPPPPZZZZZZGGGGGDPPGGGGGGGZZZZZXZXXXXXXXYYYYYYYYYYYYVVEFFVMMMMMMMMMBGGYYYYYDYWWWWWOOOMOTMMUUUUUUUUUUUUXCCCCCCCCCCCCCGGGHHHHHHLLLLLLLLLLDJDK',
  'PPPPPPZZZZZGGGGGGGGGGGGGGGGZZZZZZZZZJJXXXYYYYYYYYYYYYVVVYYVMMMMMMMMMBBGYYYYYYYYYWWWOOWWLTTTUUUUUUUUUUUUXCCCCCCCCCCCCCGGGHOHHHHHLLLLLLLLLDDDK',
  'PPPPZZZZZZZGGGGGGGGGGGGGGGGZZZZSSZZZJJYYYYYYYYYYYYYYYYVVYYVMMMMMMMMMYYYYYYYYYYWWWWWWWWYTTTTUUUUUUUUUUUUXCCCCCCCCVCGYGGGGOOHHHHHHLLLLLLLLDDDK',
  'PPPPZZZZZZZGGGGGGGGGGGGGGGGZZZSSSZZZXXYYYYYYYYYYYYYYYVVVVVVMMMMMMMMMYYYYYYYYCCWWWWWWWWWKTTTTUUUUUUUUUZXXXCCCDCVVVGGGGGGGGOOOOOOOLLLLLLLLDDDD',
  'PPPPZZZZZZZGGGGGGGGGGGGGGGGZZZXDSZRZXXYYYYYYYYYPPYYYYMMMMMMMMMMMMMMMYYYYYYYYCCWWWWWWWWTTTTUUUUUUUUUUUZZZXCCCDDGGGGGGGGGGGOOOOOOOLLLLLLLDDDDD',
  'PPPPZZZZZZZGGGGGGGGGGYYYYYYYZZXXIRRRXXXYYYYYYYYPPPPPPMMMMMMMMMMMMMMMYYYYYYYYWWWWWWWWWWTTTTTUUUUUZZZZZZZZZZCDDDDGGGGGGGGGGOOOOOOOHLLLLLLDDDDD',
  'PPPPPPPZZZZGGGGGGGGGGYYYYYMYYZXXRRXXXXXYYYYHHHPPPPPPVMMMMMMMMMMMMMMMMMMMGGCWWWWWWWWWTTTTTTTUUUUPPZZZZZZZZZCDDDBBBGGGGGGOOOOOOOOOOLLLLDDDDDMD',
  'PPPPPZZZZZZGGGGGGGGGGYYYYYYYYZXXXXXXXXXXYXYYYHPPPPPPMMMMMMMMMMMMMMMMMMMMGCCCCWWWVWVWTTTTTTTUUUPPZZZZZZZZZDDDDBBBBBGGGGGOOOOOOOOOOLLLLIIDDDDI',
  'PPPPPPZZZZZGGGGGGGGGGYYYYYYYYZZXXXXXXXXXXXYXPPPPPPPPPMMMMMMMMMMMMMMMMMMMCCCCXXXWTTTWTTTTTTTPPUPPZZZZZZZZZZDDDDDGGGGGGGGGOOROOOOIOILLLIIIIDII',
  'PPPPPPPPIZZGGGGGGGGGGYYYYYYYYZZXXXUUXUXXXXXXPPVVVPPPPMMMMMMMMMMMMMMMMMMMXCCCXXXTTTTWTTTTTTPPPPPPZZZZZZZZZDDDDDDNGGGGGGGGGUOOOOOIIILIIIIIIDII',
  'PPPPPPPPIIIGGGGGGGGGGYYYYYYYYYZZXUUUUUXXXXXXXVVVVVPPPPPPPPPMMMMMMMMMMMMMXXXXXXTTTTTTTTTTTTOOCPPPZZZZZZZZZZZXZNNNNGGGGGGGGUUOOOOIIIIIIIIIIIII',
  'PPPPPPPPPIIGGGGQYYYYYYYYYYYYYYZZXUDUUUXXXXXXVVVVVVVPPPPPPXVMMMMMMMMMMMMMXXXXXXXTTTTTTTTTTTTTCCCPTTZZZZZZZZZZZFFUUUGGGGGGGUUOOIIIIIIIIIIIIIII',
  'PPPPPPPIIIIIIQQQSQQYYYYYYYYYZZZZUUUUUUUXXXXVVVVVVVPPPPPPPXXMMMMMMMMMMMMMXXXXXTTTTTTTTTTTTTTCCCCCCTZIAIZZZZZZFFFFUUUUGUGUUUUUOOIIIIIIIIIIIIII',
  'PPPPPPPPPIIIIQQQQQQQYYYYYYYYZZZUUUUUUUXXVVVVVVVVVVPPPPPPPXXMMMMMMMMMMMMMNNNNXTTTTTTTTTTCCCCCCCCCZIIIAIZZZIZFFFFFFFUUGUUUUUUUNNYYIYYIIIIIIIII',
  'AAPPPPPIIIIIIQQQQQQQYYYYQQQQUUUUUUUUUXXXXXXXVVVVVVVPPPPPPPXMMMMMMMMMMMMMNNNNNTFFFTTTTTTCCCCCCCCCCIIIIIZZIIZFFFFEEFFUUUUUUUUNNYYYYYYYIIIIIIII',
  'AAPPPPIIIIIIIIIQQQQQYYYYQQQUUUUUUUUUXXXXXXVVVVVVVVVPPPPPPPXXXXXXXYYYYYYNNNNNNFFFFTTTCCCCCCCCCCCCCIIIIOIZIIIIFFFFFFUUUUUPPPPPPPPPYYYYIIIIIIII',
  'AAAAPPIIIIIIIQQQQOQQQQQYQQQQQUUUUUUUUUXXXXVVVVVVVSPPPPPPQQQXXXXXRYYYYYYNNNNNNFFFFTFTCCCCCCLCCCCIIIIIIIIIIIIFFFFFFFFUUUUPPPPPPPPPYYYYYIIDIIIZ',
  'AAABQQBBBBIIIIIIOOQOQQQQQQQQQUUUUUUUUUXXXXXVVVVVVSSPPPPQQQQXXXXXXYYYYYYNNNNNNNFFFFFTTTCCCCLLCCCIIIIIIIIIIIIFFFFFFFFFUUUPPPPPPPPPYYYYYYDDIIIZ',
  'AABBBBBBBIIIIIOWOOOOQQQQQQQUUUUUUUUUUUXXXKXKKKVVVPPPPPPQQQQQQEEERYYYYYYNNNNNRRRFFFFTTCCCCLLLLLIIIIIIIIIIIIIFFFFFFFFUUUUPPPPPPPPPYYYYYDDDDDZZ',
  'AAABBBBBBIIIOOOOOOOOOOOQQQQUUUUUUUUUUUXXKKKKKKKKYYYYPZQQEEEEEEEERRRRNNNNNRRRRRRRFFFCCCCCCCLLLLIIIIIIIIIIIIFFFFFFFKFFFUUPPPPPPPPPYYYGYDDDDZZZ',
  'AABBBBBBBIIIOOOOOOOOOOOQQQQQUQQUUUGUUXXXXKKKKKKKYYYPPZQQEEEEEEEERRRNNNNNNRRRRRRRRRRRPCCCCCCLLLLIIIIIIIIIIIVFFFFFVKFVUUUPPPPPPPPPYOYYYYDDDZDD',
  'BBBBBBBBBBIIIOOOOOOOOOOOOQQQQQQUMUGULLXKKKKKKKKKYYYYYQQQEEEEEEEERRRNNNNNLLRRRRRRRRRRRCCCVCILLLLIIIIIIIIIIVVVVVVVVUUUUPPPPPPPPPPPDDYDDDDDDDDD',
  'BBBBBBBBBBBIIOOOOOOOOOOOOOQQQUUUUQGLLLLLKKKKKKKKYYYYQQQQEEEEEEEERRRLLLNLLRRRRRRRRRRRRCCCCSSMNLLIIIIIIIIIIVVVVVVVVVUUPPPPPPPPPPPPDDDDDDDDDDDD',
  'UBBBBBBBBBIIIOOOOOOOOOOOOOQQQQUUQQLLLLLLLLKKKKYYYYQYQQQQEEEEEEEERRRLLLLLLRRRRRRRRRRRRCCCCCSMNLIIIIINIIIIWWVVVVVWWWWUPPPPPAAPPPPADDDDDDDDDDDD',
  'UBBBBBBBBBIIIIOOOOOOOOOCCCQQQQUQQQQQLYYYLYYKKKYYYYQYQQQQEEEEEEEERRLLLLLLLLRVRRRRRRCCRCCCCCSMNNNININNNIIIWWVVVVVVVWWUPPPPPAAPPPPADDDDDDDDDPDD',
  'BBBBBBBBBBIIKOOOOOOOOCCCCCQQQQQQQQQQYYYYYYYKYYYYYYQQBQQQEEEEEEEEEEEEEEEELLLVRMRRRDDRRCCCCCSNNNNNNNNNNIIIIWWVVVVVVWVVPPPPPAAPPPPAQDDDDDPPPPPD',
  'BBBBBBBBBBKKKOKOOOOOOCCCCCCQQQQQQQQQYYYYYYYYYYYYYYYQQQQQEEEEEEEEEEEEEEEELLWWRMRCCCCCCCCCCCSNNNNNNNNNIIINNWWVVVVBBBVVPPPPPPPPPAAAQQQDDDDDPPPP',
  'TBBBBBHBCKKKKKKKKKOOCCCCCCCQQQQQQQQQYYYYYYYYYYYYYYMQQQQQQQQQQEEEEEEEEEEEWWWWRWWCCCCCCCCCCCSSNNNNNNNNNNNNBWWVBBBBOVVVPPPPPPPPPAAAAQQQDPPPPPPP',
  'HHHBBHHHHHKKKKKKKKCCCCCCCCSQQQQQQQQQQQYYYYYYYYYYYYMMMQWQQQQQQEEEEEEEEEEEWWWWWWWCCCCCCCCCCCSSNNNNNNNNNNNNBBBBBBBBBVVVPPPPPPPPPAAAAQQTDPPPPPPP',
  'HHHBBHHHHHKKKKKKKCCCCCCCCCQQQQQQQQQQQQYYYYYYYYYYMYMMMMWWQQQQQLLLLLLLLLWWWWWWWWWCCCCCCCCCCCNNNNNNNNNNNNBBBBBBBBBBBBVVVVVVAAAAAAAAAATTTTPPPPPP',
  'HHHHBHHHHKKKKKKKKCMMCCCCCCYQQQQQQQQQQYYYYYYYYMMYMMMMMMWTQQQQQLLLLLLLLLLWWWWWWWWCCCCCCCCCCCNNNNNNNNNNNNBBBBBBBBBBBBBBVVRVAAAAAAAAATTTTTPPPPPP',
  'HHHHHHHHHHKKKKKMKCMMCCCCCCQQQQQQQQQQQYYYYYYYMMMMMMMMMMMTQQQQQLLLLLLLLLLWWWWWWWWCCCCCCCCCCCDNNNNNNNNNNNNNBBBBBBBBBVVVVVVTAATTTAAATTTTTTPGPPPP',
  'HHHHHHHHHKKKKKMMMMMMMMMMCCCVQQQQQQTTQYYYYYYYMMMMMMMMTTTTTQQLLLLLLLLLLLWWVWWWWWWCCCCCCCCCCCDDAAANNNNNNNNNNNBBBBBBBBVBBVOAAATTTAATTTTTTTPPPPPP',
  'HHHHHHHKKKKMMKKMMMMMMMMMRRRQQQQQQQTTTTYYYYYYYMMMMMMMMTTTTTQLRLLTTTWWWLWWWWWWWWWCCCCCCCCDDDDDDNNNNNDDTNNNAABBBBBBBBBBBVTTAATTTTAATTTTPPPPPPPP',
  'HHHHHHKKKKKKMMMMMMMMMMMMRRQQQQQQQTTTTTYYYYYYMMMMMMMVMTTTTTQTTTTTTTTWWWWWWHWWWWWCCCCCCCCDDDDDDDDNNDDDDNNAAABBBBBBBBBBBBBTTATTTTATTTTTTPPNPPPP',
  'HHHHOHYKKKPKMMMMMMMMMMMMMQQQOQQQQTTTYYYYYYYYMMMMMMMMMMTTYTTTTYYXTWWWWBWWWWWWWWWCCCCCCCCCCCCCDDDDDDDDDDAAAGJBBBBBBBBBBBBBTTTTTTTTTTTTTPPPPPPP',
  'HHKKYHYYMMMMMMMMMMMMMMMMMMMQOQQQTTTTTYYYYYYMMMMMMMMMMMYYYYTTHYYXTWWWWWWWWWGCCWWWWCCCCCCCCCCCDDDDDDDDDDAAAGJJJBBBBJBBBBJJBTTTTHHHHTTHHHPPPPPP',
  'KKKKYWYYUMMMMMMMMMEMMMMMMMMMTTQTTTTUYYYYYYYYMMMMMMMMMMHHYYTTHYYXXWWWWWWWWYCCCWCCCCCCCCCCCCCCDDDDDDDDDDDDDJJJJBBBBJJBBBBBBTTTTHAHHHTXHHHHPPPP',
  'KKKYYYYYMMMMMMMMMEEMMMMMDMMMTTTTTFTTQYYYYHHWWMMMMMMMMHHHHTTTHYYYXXWWWWWWCYCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDJJJJJBBJBJBBBBBTTTTTTTHHCHHHHHHHHHPP',
  'KYYYYYYYYMMYMEMMEEEMMMDDDMMMTTTTTTTTTYYYYHHHHMMPGMMMHHHHHHHHHYYYYXWWWWWWCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDQJJJJJBJJJJBBBBTTTTTTTHHHHHHHHHHHHHH',
  'YYYYYYYYYYYYMEMMEEMMMDDDDDMAHHHHHHTTTTYYHHHHMMMMGMGHHHHHHHHHYYYYYXWGGGGGCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDJJJJJJJJJJUTTTTTTTTAATHHHHHHHHHHHHHH',
  'YYYYYYYYYYYEEEEEEEMMMDMDDDDAAAHHHHHHHHHHHHHHHMMBGGGHHHHHHHHHYYYYYYGGGGGGCCCCCCCCCCCCCCCCCCCCDDIDDMDDDDDDJJJJJJJJJJJMPPPTTTAABAAAHHHHHHHHHHHH',
  'YYYYYYYYYYYYEEEEEEEEMMMDDDDAAAAHHHHHHHHHHHHHHHMBGGGGHHHHYYYYYYYYYYGGGGWGCCCCCQQQCCCCCCCCCCCCDDDZQMQQQQFJJJJJJJJJJJJMPPPPTTAAAAAAHHHHHHHHHHHH',
  'PYYYYYYYYYYYEEEEEEEEMMDDAAAAAAAHHHHHHHHHHHHHVVVGGGGHHYYYYYYYYYYYYYGGGGWWWCCCCCQQQQWCCCCCCCCCDDDDQQQQQQQJJJJJJJJJJJJMPPPPPAAAAAAAAAHHHHHHHHHH',
  'PPYYYYYYYYEEEEEEEEEEEEADAAAAAAAHHAAHHHHHHHHHVVVVVVGYYYYYYYYYYYYYYYGGGGWWWIICCQQQQQQCCCCCCCCCDDDQQQQQQQQJJJJJJJJJJJHIPPPPPPPAAAAVAAAHHHHHHHHH',
  'YYYYYYYYYYYEEEEEEEEEEEAAAAAAAAAAAAAHHHHHHVVVVVVVVVVYYYYYYYYYYYYYYGGGWWWWWWWWXQQQQQQDCDDDDDDDDQFQQQQQQQCCCCJJJJJJJHHIPPPPPAAAAAAAAAHHHHHHHHHH',
  'IIYYYYYYYYYYYEEEEEEEEEAAAAAAAAAAAQQHHHHHHVVVVVVVVVVVYYYYYYYYYYYYGGGGGWWWWWWWQQQQQQQDDDDDDDDDDQQQQQQQQQQQQCJJJJJJJIIIIIIPAAAAAAAAAAHHHHHHHHHH',
  'IIYYYYYYYYYYYYEEEEEAAEAAAAAAAAAAAQQQRRHHHHZVVLLLVVWVYMYYYYYYYYYYGGGGGWWCCWWWQQBQQQQDDDDDDDDDDDQAQQQQQXBJJJJJJJJJNNNIIIIPAAAAAAAAAAHHHHHHHHHH',
  'IIYYYYYJJJJJYYEMEXAAAAAAAAAAAAAQQQQQRRRRHHZVLLLLLWWDMMYYYYYYYYYGGGGGGGGGGIWWWBBBQQQQDDDDDDDDDDQQQQQQQXXXUJJJJJJJNNNIIIIPAAAAAAAATAHSHSHHRRRH',
  'IIIIYYJJJJJYYYEMEXXXAAAAAAAAAAQQQQQQRRRRRLLLLLLLLLWDDDYYYYYYYYAGGGGGGGGGRRRRRBXXXXXXXXXJJDDDDQQQQQQQQXXXJJJJJJJNNNNINNNPPBAAAAASSSSSHSHSRRRH',
  'XXXIYYJJJJZYYYEMMXXXXAAAAAAAAQQQQQQQQQRRLLLLLLLLLLWLDDDYYYDDYAAGAGAGGGZGRRRRRRXXXXXXXXXXXXXXJDDDDDDDXXXXXXXJNNNNNNNNNNNPPAAALASSSSSSSSSSHHHH',
  'XXXXYGGJJJZYYYXXXXXXXXAAAAQQQQQQQQQQQQRRLLLLLLLLLLLLDDDDYDDDAAAAAAAJLLLLLLLLLRXXXXXXXXXXXXXXDDDDDDDXXXXXXXXJNNJJNNNNNNNNNNALLSSSSSSSSSSSSHQQ',
  'XXGGYGGGJJJYYCXXXXXEEAAAAAAQQQQQQQQQWWLLLLLLLLLLALJLDDDDDDDDAYYAAAAALLLLLLLLLRRRRXXXXXXXXXXXDDDDDDDXXXXXXXXJJJJEJJNNNNNNNNNNNDSSSSSSSSSSSQQO',
  'XXGGGGGGCXXXXXXXXXXEAAAAAAAQQQQQQQQQQWWLLLLLLLLLLLLDDDDDDDAAAYYYAAAALLLLLLLLLRRYYXXXXXXXXXXXDDDDDDDXXXXXXXXJJJJJJJNNNNNNNNNNSSSSSSSSSSSSSSSO',
  'XXGCCGCGCXXXXXXXXXXXXXXXAAAQQQQQQQQQQWWLLLLLLLLLLLLDDDDDDDYYYYYYSSSSLLLLLLLLLRXXXXXXXXXXXXXXJDDDDDXXXXXXXXJJJJJJJNNNNNNNNNNNSSSSSSSSSSSSSOSO',
  'XCCCCCCCCXXXXXXXXXXXXXXAAAAQQQQQQQQQQWKKLLLLLLLLLLLLDDDDDYYYYYYYYYLLLLLLLLLLLRLLLLXXXXXXXXXXDDDDDDDXXXXXXXXJJJJNJNNNNNNNNNNNSSSSSSSSSOSSSOOO',
  'XXCCCCCCCXXXXXXXXXXXXXXXXAATTTQQQQQQQQKKKLLLLLLLLLILDDDDDYYYYYYYYYLLLLLLLLLLLRLLLLXXXXXXXXXXDDDDDDDXXXXXXXZJJJJNNNNNNNNNONNNWSSSSSOSOOSOOOOO',
  'XXCCCCCCCXXXXHIHXXXXXXXXXTTTQQQQTTQTTTTKLLLLLLLLLLDDDDDDDXYYYYYYYYLLLLLLLLLLLLLLLLLLLFZZZZZZDDDDDXXXXXXZZXZJJJJNNNNNNNNNONNNWSSSSSOOOOOOOOOO',
  'XCCCCCCXXXXXXHHHXXXXXXXXXXTTTQQQTTQTTTKKKKKKLLLLLWDDDDDDDYYYYYYYYYLLLLLLLLLLLLLLLLLLLZZZZZZZDDDDDXXXXXXXZZZZJJNNNNNNNNNNNNBBSSSSSOOOOOOOOOOO',
  'XCCCCCCXXXXXHHHHXXXXXXXXXTTTTTTTTTTTTTKKKKWWWWCCLWWDXXTXXYYYYYYYYYLLLLLLLLLLLLLLLLLLLFZZZZZZUUDDDDDDXZZZZZZZJZZNNNNNNNNQNBBBBBSNHYOOOOYYYOOO',
  'XXXXXCCXXXXXHHHHXXXXXXXXXXXTTTTTTTTTTTTKKRRWWWWWWWWWXXXXXXYYYYYYYYLLLLLLLLLLLLLLLLLLLFZZZZUUUUUUUDDDDDDZZZZZJZZZNNNNNNNNNBBBBBBNYYOOOYYYYOOO',
  'XXXXXXXXXXXXXXXXXXXXXXXXXTTTTTTTTUTTTUUUURRRWWWWWWWXXPPXXXXXYYUYYYUUAAAAAAAAAFAFFFFFFFZZZZIIUUUUDDDDDZZZZZZZJZZZNNNBBNNNBBBBBNNNYYYYYYYYYOYO',
  'XXXXXXXXXXXXXXXXXXXXXXTTTTTTTTTTTUUUUUUUURRRRWWWWWWPPPXXXXEYYYUUYYUUAAAAAAAAAAAXFFFFFFZZZZUUUUUUUDDDDDZZZZZZZZZZZZSBBBBBBBBBBNNNBBYYYYYYYYYY',
  'XXXXXXXXXBBBBBXXXXXXXXTTTTTTITTTIIUUUUUUBUUUUWWWWWPPPPPXXXUUUUUUYYUUAAAAAAAEAAAXFFFFZZAZZZUUUUUNUUDDDDDZZZZZSSSSSZSBBBBBBBBBBNNNYYYYYYYYGGGG',
  'XXXXXXXXXXBBOOXXXXXXXXTTTTTTIITTIIIIUUUUUUUUUUWWWWWPPPPPXXUUUUUUUUUAAAAAAAAEXXXXXFFFFZZZZZUUUUUUUDDPPDDDZZZZSSSSSSSSBBBBBBBBBBNBYYYYYYYYDDDD',
  'XXXXXXXXBBBBOOXJXXXXXIIITIIIIIIIIIIIUUUUUUUUUUUWWWWWPPPKKAUUUUUUUUAAAAAAAAEEXXXXXXXFFZZZZUUUUUUUUUDPPPDDZZSSSSSSSSSSSSBBBBBBBBBBYYYYYYYZZDDD',
  'XXXXTXXBBBBBBBOXXXXXBBIIIIIIIIIIIIOUUUUUUUUUUUUUUWWKKKKKKUUUUUUUUUUAAAOAAAADXXXXXXXXFFZZUUUUUUUUPPPPPDDDDDSSSSSSSSSSSSBBBBBBBBBYYYYYYYYZDDDD',
  'XXXXTTTYYBBBBBBXXXXXBBBIIIIIIIIIIIUUUUUUUUUUUUUWWWWWKKKKKUKKUUUUUUUUUIOOOOODXXXXXXXXXUGUUUUUUUUUPPPDDDDDDDSSSSSSSSSSSSBBBBBBBYYYYYYYYYDDDDDD',
  'XXXXTTLTTBBBBBBBBBBBBBBIIIIIIIIIIIUUKUUUUUUUUUUSKWWKKKKKKKKKKKGUUUUUUUIOFODDDXXXXXXXUUUUUUUUUUUPPPPDDDDDDDSSSSSSSSSSSSBBBBBBBBBYYYYYYDDDDDDD',
  'XTTTTTTTTBBBBBBBBBBBBBBBIIIIIIIIIIPUUUUUUUUUUUUUKWKKKKKKKKTKKKKUOUUUUUOOOODDDXXXXXXXUUUUUUUUUUUUPPPDDDDDDDDDDSSSSSSSSSBBBBBBBBBYYYYYYYYDDDDD',
  'TTTTTTTXTBBBBBBBBBBBBBBIIIIIIIIIIIPPUUUUUUUUUUUUKKKKKKKKKKKKKKKOOOUUFUOOOOODDXXXXXXXXXXUUUUUUUUUPPPDDDDDDDDDDSSSSFFFFFFFFFBBBBBBBYYYYYDDDDDD',
  'TTTTTTTTTBBBBBBBBBBBBIIIIIIIIIIUIIPPPPUPPUUUUUKKKKKKKKKKKKKKKKOOOOOUODOOOOODOOXXXXXXXXXXUUUZUUZZPPPPDDDDDFFFFFFFSFFFFFFFFFBBBBBBYYYLLYLRDDDD',
  'TTTTTTTTTBBBBBBBBBBBBBIIIIIIIIIUUUPPPPPPPUUUHHHHKKKKKKKKKKKKKKOOOUUUOOOOOOOOOHHXXXXXXXXXXZZZZZZZPPPPPDDDDFFFFFFFFFFFFFFFFFBBBBBYIYYYLLLRDDRR',
  'TTTTTTTTTMTBBBBBBBBBBBIBBIIIIUIIUUPPPPPPPPPHHHNHKKKKKKKKKKKKOOOOOOOOOOOOOOOOOOPXXXXXXXXXCZZZZZZZZPPPPDDDDFFFFFFFFFFFFFFFFFBBBBYYYYYYRRRRRRRR',
  'TTTTTTTTTMTBBBBBRBBBBBBBIIIIIUUUUUPUUPPPPPHHHHHHHKKKKKKKKKKKOOOOOOOOOOOOOOOOOOPXXXXXXXCCCCCZZZZZZPPPPDDDDFFFFFFFFFFFFFBBBBBBBBBCBKYFRRRRRRRR',
  'TTTTTTTTTMTBRBBRRBBBBBBBIIIIIIUUUUUUUPPHHHHHHHHHHKKKKKKKKKKKKOOOOOOOOOOOOOOPOOPXKKKXXXCCCCCZZZZZZZZPDDDOOFFFFFFFFFFFFFBBBBBBBBBBBKKCRRRRRRRR',
  'TTTTTTTTTTTRRRRRRRRBBBBBBIIIIIUUUUUUUUHHHHHHHHHHHHKKKKKKKKKSSOOOOOOOOOOOOOOPPPPXKKKKKKCKCCCZZZZZZZZPDWDOOFFFFFFFFFFFFFBBBBBBBBBBBKCCCCCRRRRR',
  'TTTTTTTTTTTDRRRRRRBBBBBOOFIILIPUUUUUUUHHHHHHHHHHHHHKKKSSZZZSSOSSOOOOOOOOOOOPPPPPKPPKKKCKKCCCOZZZZZZPPDDOOFFFFFFFFFFFFFBBBBAABBBBBKKCCCRRRRRR',
  'TTTTTTTTTRRRRRRRRRBBBBOOOOIIUPPUUUUUUUHHHHHHHHHHHHSSSSSSSSSSSOSSSSSDOOOOCOOKPPPPPPPKKKKKKKCCCZZZZZZZPPDOWFFFFFFFFFKBBZBKKKBBBBBBBKKKCCCRRRRR',
  'TTTTTTTTTRRRRRRRRRBBOBBOOOOUUUUUUUUUHHHHHHHHHHHHHVSSSSSSGSSSSOOSSSSDDDDOOOPPPPPPPPPPKKKKKKCCCKKZZZZZZQQOOFFFFFFFFFKBBBBBKKBBBBBBBKKKCCXCYCRR',
  'TTTTTTTTBRRRRRRRRROOOOOOOOOUUUUUUUUOHHHHHHHHHHHHHVSSDSSSGSSSSOSSSSSDDDOOOBBBBPPPPPPKKKKKKCCCKKKKZQRQQQQQOFFFFFFFFFBBKKKKKKBKBBKKBKKKCCCCCCRR',
  'TTTBBBBBBBRRRRRRRROOOOOOOOOOUUUUUUUOHHHHHHHHHHHHHSSSSSSSSSSSSSSDDDDDDBOOOBBBPPPPPPPKKKKKKKKKKKKQQQQQQQOOOFFFFFFFFFBKKKKKKKKKBBKKKKKKCCCCCCCR',
  'TTTFFBBBBBRRRRRRRRROOOOOOOOOOUOUOOUOOFFFFHHHHHHHSSSSSSSSSSSSSSSAADDDBBBBBBBBBBPBPBBBKKKKKKKTTKQTQQQQQQQOOFFFFFFFFFKKKKKKKKKKKKKKKKKDCCDCCCCE',
  'TFFFFBBBBBRRRRRRRRROOOOOOOOOOOOOOOOOOFFHHHHHHHHHHSSSSSSSSSSSSSSAADABBBBBBBBBBBBBBBBBKKKTTTTTTKQQQQQQQQOOOFFFFFFFFFKKKKKIKKKKKKKKKKKDDDDDDCEE',
  'TTFFFBBBBBGRRRRRRRREEOOOOOOOOOOOOOOOFFFHVHHHHHHHHSSSSSSSSSSSSSJAAAABBBBBBBBBBBBBBBBBBBKTTTTTKKQQJQQQQQQOFOOOOOOOKKKKKIIIKIKKKKKKKKDDDFDDDDEE',
  'TTTFBBBBCBRRRRRRRRRREOOOOOOOOOOOOOFOOOFFHHHHHHHHHHSSSSSSSSSSSSSYAAABBBBBBBBBBBBBBBBBBBKTTTTTKKKKQQQQQQQFFOOOOOZZGGKIIIIIIIIDDKKKKDDDZDDDDDEE',
  'TNTFWBBBBRRRRRRRRRGREOEOOOOOOOOOOOFFOOFFFFHHHHHHWWWSSSASSSSSSSAAAAABBBBBBBBBBBBBBBBBIBKKTTKKOOKKKQQQQQQFOOOOOGGGGGIIIIIADDTDDDKKKDDDDDDDEEEE',
  'WWWWWWBBBRRRRRRRRRRBEEEEEOOOOOOOOOFFFFFFFFHHHHWWWWWWWWAASSSSAAAAAAAGBBBBBBBBBBBBBBQQGGKKKKKKOOKOKQQKQQQFFZZOOZGGGGIIIIIADDDDDDDDKKDDDDDEEEEE',
  'WWWWWWBBBRRBBBBBBRRBBBEEEOOOOOOOOOOXXFFFFFFHHHWWWWWWWWWAAAAAAAAAAAAABBBBBBBBKBBBBBGGGGGGKKKKOOOOKKKKYQQFFZZZOZGGGGIIIIIIIDDDDDNNKKDDDDDEEEEB',
  'WWWWWWWBBBBBBBBBBRRBBBBEEEOOOOOXXXXXXFFFFFFFNFFFWWWWWAAAAAAAAAAAAKAKBKBBBBBGGGWBBBGGGGGEHHKKOOOOOOKKYHHYYZZZZZGGGGGIIIIIIIIDDINRBKDDEEEEEBBB',
  'WWWWWWWWWWBBBBBBBBBBBBEEUOOOOOOXXXXXXFFFGFFFFFFFFWWWAAAAAAAAAAAAAKKKKKKBBBGGGGGSSSGGGGGGGHKKKOOOOKKKYYYYYZZZZZGGGGGGIIIIIIIIIINRBBLBBEEEBBBB',
  'WWWWWWWWBBBBBBBBBBBBBBUUUPOOOOOUQXQXPFFFFFFFFFFWFWAAAAAAAAAAAAAAAKKKKKKKBBGGGGGSSSGDGGGGGHHHHXOOOYYYYYYYYZZZZZGGGGIGIIIIIIIIIINBBLLBBBBBBBBY',
  'WWWWWWWBBBBBBBBBBBBBBBUUUUUOUUOUQQQFFFFFFFFFFFFWWWWAAAAAAAAAAAAAAKKKKKGKBVGGGGGSSSGGGGGGHHHHOOOOSYYYYYYYYZZZZZZGZZIIIIIIIIIIINNBBBBBBBBBBBBB',
  'WWWWWBBBBBBBBBBBBBBBBOOUUUUUUUUUUQQQFFFFFFFFFFFWWWWWWAAAAAAAAAAAAKKKKKGGVVGGGGGGGSGGGGGGHHHHHHHHYYYYYYYYYYYZZZZZZZIIIIIIIIIIINNBBBBBBBBBBBBB',
  'WWWWWBNBBBBBBBBBBBBBUUUUUUUUUUUUUQQQFFFFFFFFFFFFFFWWWWAAAAAAAAAKKKKKKGGGGGGGGGGGGGGGGGGGHHHHHHYYYYYYYYYYYYYZZZZZZZIIIIIIIIIIIINNBBBBBBBBBBBB',
  'WWWWWBBBBBBBBBPPBBBBBUUUUUUUUUUUUQQQMMMMMMMMFFFFFFWWWWAAAAAAAAKKKKKKKKKGGGGDUGSGTTGGRGGGGVHHHHYYYYYYYYYYYYYYZZTTTZIIIITIIIICCNNBBBBBBBBBBBBB',
  'WWWWWWCCBBPPPPPPVBBBNUUUUUUUUUUUUQQQMMMMMMMMFFFFFFWWWWWWAAAAAKKKKKKKKKKKKKDDDSSSGGGGGGGGHHHHHHYYYYYYYYYYYYYQZZZTTTTITTTIIICCNNBBBBBBBBBBBBBB',
  'WWWWWWBBBBBPPPPPPBNNNNNNUUUUUUUUACQCMMMMMMMMFFFFFFWWWWWWWAAKKKKKKKKKKKKKKDDSSSJJJJJJJJJGHGGHHHHYYYYYYYYYYYYYYZZTTTTTTTTICCCNNNCCCCBBBBBBBBBB',
  'WWWWWWWMBBBPZPPPPANNNNNNUUUUUUQUCCCCMMMMMMMMFFFFFWWWWQWWWAKKKKKKDDDDDKKDDDDDDSJJJJJJJJJGGGGGHHYYYYYYYYYYYYYYYTTTTTTTTTTICCCCCCCCCCBBBBBBBBBD',
  'WWWWAWBBBBBBZPPPPPNNNNNNNUUUUUQQCCCCMMMMMMMMYFFFFWWWWQQQWAKKKKKKKKDDDDDDDDDDDSJJJJJJJJJGGGGGGHHHYYYYYYYYYYYYTTTPTTTTTTTTTCCCCCCCCCBBBBBBBDDD',
  'AAAAABBBBBBBPPPPPNNNNNNNUUUUQQQCCCCCMMMMMMMMKYFFFWWQWQQQQKKKKKKKKDDDDDDDDDDDDSJJJJJJJJJGGGGGGHHHHHYYYYHHYYYYTTPPTTTTTTCTTCCCCCDDDCBBBBBBBDDD',
  'AAAAAAABBBBBPPPPPPNNNNNNUUUUMMMMMMMMMMMMMMMMYYYFFFQQQQQQQQKKKKKKKDDDDDDDDDDDSSJJJJJJJJJGYGGHHHHHHHHYYHHYYYYYTTPTTTTTTTCCCCCCCCDDDDBDDDDDDDDD',
  'AAAAAAAAAABBAPPPPPPAAAANUUUYMMMMMMMMMMMMMMMMYWWWWWQQQQQQQQKKKKKKKKKDDDDDDDDDDDJJJJJJJJJGGGGHHHHVHHHYYHHHHHYPPPPPPTTMTTTTTCCCCCGGDDBDDDDDDDDD',
  'AAAAAAAAAAAAAAAAAAAAAANNNYGYMMMMMMMMMMMMMMMMWWWWWWQQQQQQQQSSSSKKKKKDDDDDDDDDDDDDSSSSGGUGGYGHHHHVVHHHHHHOHOOOOPPPTTTMTTWWWCCCCCGGDDDDDDDDDDDD',
  'AAAAAAAAAAAAAAAAAAAATNNYYYYYYYYMMMMMWWYYYYWWWWWWWWWCQQQQQQQQSKKKSDDDDDDSSSSDDOOYYYYSYYYYGYYVVVHVVVHHHHHOOOOOOPPPOMMMMXWWWCCCCCGUDDDDDDDDDDDD',
  'AAAAAAAAAAAAAAAAAAAATNNYYYYYYYYMMMMMWWWYYYYWWWWWWWYCVQQQQQQQSSSSSDDDDSSSSSSSDOOYYYYYYYYYYYVVVVVVVHHHHHOOOOOOOOOOOOOMXXXWCCOCCCGGDDDDDDDDDDDD',
  'AAAAAAADDDAAAAAAAATTTNNNYYYYYYYMMMMMWWWYWWWWWWWWWWWCQQQQQQQSSSSSDDDDDSSSSSSSSSOYYYYYYYYYYYVVVVVVVVVVHHOOOOOOOOOOOBBXXXXXCCOOGGGGGDDDDDDDDDDD',
  'AAAAAAADDAAAAAAAATTTTTNNNYYYYYYMMMMMWWWWWWWWWWWWWWWCCYCQLQSSSSSSSDDDPSSSSSSSSSOOOOYYYYYYYVVVVVVVVVVHHHHOOOOOOOOOOOBXXXXXGCGOGGGGGGGDDDDDDDDD',
  'AAAADDDDDDAADAATTTTTTTNNNYYYYYYMMMMMWWWWWWWWWWWCCCCCCCCCCIISSSSSDDDTDSSSSSSSSSOOOOOYYVVVVVVVVVVVVVVHHHHOOOOOOOOOOOXXXXXGGGGGGGGGGGDDDDDDDDDD',
  'AAADDDDDDAADDAATTTTTTNNNNYNNYKKMMMMMWWWWWWWWWWWCCCCCCCCIIIISSSSSDDTTTSSSSSSSSSWOOOYYZVVVVVVVVVVVVVVVOOOOOOOOOOOOOXXXXXFGGGGGGGGGGGGDDDDDDDDD',
  'AADDDDDDDDDDDAATCTTNNNNNNNNNNNKKKKKWWWWWWWQWWWCCCCCCCCCIIIIXSSSSSRSTTTIIISSSSSWWWWZZZZVVVVVVVVVVVVVVOOOOOOOOOOOOOXXXXXFFQGGGGGGGGDDDDDDDDDDD',
  'AADDDDDDDDDDDAAKCTTTNNNNNNNNNKKKKWKWWWWWWWQWWCCCCCCCCGGIIIIKSSSSSSSTTTIIISSSSSWWWZZZZZVVVVVVVVVVVVVVVOOOYYYYYYYYOXXXXXFFQQGGGGGGGDDODDDDDDDD',
  'AADDDDDDDDDDDAAKCCTNNNNNNNNKKKKKKWWWQWWWQWQQWCCCCCCCCCGGIKKKKKSSSSTTTTTIIWWWWWWWWZZZZZZVVVVVVVVVVVVVVLOOYYYYYYYYOOOXXXXFXXIGGGGGGAADDDDDDDDD',
  'DDDDDDDDDDDDDDDKCCNNNNNNNNNKKKKKKKWKQQQQQQQQCCQCCCCCCCGIIKKKKKKSSSTWWWTTIWWWWWWWWZZZZZZVSVVVVVVVVVVVVVWOYYYYYYYYOXXXXXXXXXIGGGGGGGADUPPPDDDD',
  'VVDDDDDDDDDDDDWKKCKNNNNNNNKKKKKKKKKKKKQQQQQQQQQQCCCCCGGGDKKKKKKSSSSWWWWWWWWWWWWWWZZZZZZZZZWWWWVVVVVVVWWOYYYYYYYYXXXXXXXXXXXZZLLAAGAAPPPPDDDD',
  'VVVDDDDDDDDDDWWKKKKKNNNNNNNKKKKKKKKKKKKQQQQQQQQQQCCCCCGGGKKKKKKKSSWWWWWWWWWWWWWWWZZZZZZZZWWWWWVVVVVVVWOOYYYYYYYYYYYYYYXXXXKLLLLAAAAAPPPPDDDD',
  'VVVVDDDDDDDDDWWKKKKKNNNNNKNKKKKKKKKKKKQQQQQQQQQCCCCCCCGGGKKKKKKKKSWWWWWCWWWWWWWWRZZZZZZZZWWWWWWZZOVZZZZTYYYYYYYYYYYYYYXXXPLLLLLAAAAAPPPPDDDD',
  'VDDDDDDDDDWWWWKKKKEKKKKKKKNKKKKKKKKQQKQQQQQQQVQGCGCCCGGGGFKKKKKKWWWWWWWCCWWWWWWWWWZZZZZZZZWWWWZZZVVZZZZZYYYYYYYYYYYYYYXXXXLLLLLLLAAAANUNNDDD',
  'PDPDDDDDDDWKKKKKKKKKKKKKKKNNKKCCKKKQQQQQQQQQQQQGGGGCCGGGGKKKKKKKBWWWWWWWWWWWWWWWZZZZZZZZZZWWWWWZZZZZZZZZYYYYYYYYYYYYYYXXXXLLLLLLLAAAANNNNDDN',
  'PPPDDDDDDDWWWKKKKKKKKKKKKKCCOCCCKQQQQQGGQQQQQQQGGGGGGGGGKKKKKKKBBBWWWWWWWWWWWWWWWZSZZZZZZZWWWWWZZZZZZZZZYYYYYYYYYYYYYYXXJLLLLLLLLAAAANNRNNDN',
  'PPPPPDDDDDWWWKKKKKKKKKKKKCCCCCCCCQQQQGGGQQQGGQRGGGGGGGGKKKKKKBBBBWWWWWWWWWWWWWWWWSSZZZZZWWWWWWWZNNZZZZZZZZQQQQYYYYYYYYXXXLLLLLLBLAAAANNNNNNN',
  'PPPPPPPDWWWWWKKKKKKKKKKKCCCCCCCCCCQQGGGGGQQGGGGGGGGGGGGKKKKKBBNBBBBBWWWYWWWWWWWSWWSSZZYZZWEEEEEZRRRZZZZZZZQQQQQQQQXXZZXUULLLLLLLYYYAANNNNNNN',
  'PPPPPPPPWWWWWKKKKKKKKKKCCCCCCCOOCYQQGGGGGGGGGGGGGGGGGGGKKKKKMBBBBBBBWWWYYWWWWWSSSSSSZZZEEEEEEEJRRRRZZZSZZZQQQQQQQQRZZZDDUULLLYYYYYYNNNNNNNNN',
  'PPPPPPPPWWWWKKKKKKKKKKKKCCCCCCOOCQQTGGGGGGGGGGGGGGGGGGGKKKKKBBBBBBBBYYYYYYWYYYSSSSSSZZEEEEEEEEJRRRRRZRRQQQQRQQQQQQRRRDDDUUYYYYYYYYNNNNNNNNNN',
  'PPPPPPPPPPPWWKKKKKKKKKKKKCCCCCOTTQOTTGGGGGGGGGGGGGGGGGGGGGGKBBBBBBBYYYYYYYYYYYSSSSSSZAAEEEEEEEERRRRRRRRQRQQRQQQQRRRRRDDUUUUYYYYYYYNNNNNNNNNN',
  'PPPPPPPPPPPPWMMKKKIKWWKCCCCCCCOOTTTTTTTGGGGGGGGGGGGGGGGGGGGKGGBRBWWYYYYYYYYYYYSSSSSSSAAEEEEEEEERRRRRRRRRRRRRQQRRRRRRRDDUYYYYYYYYNNNNNNNNNNNN',
  'PPPPPPPPMPPPMMMMKKIKWWKCCCCCCCOOTTTTTTTTGGGGGGGGGGGGGGGGGGGGGYYYYWYYYYYYGYYYYYYSSSSSSSSEEEEEEEEEERRRRRRRRRRRQQRRRRRRRRRRQYYYYYYYNNNNNNNNNNNN',
  'SPPPPMPPMMMMMMMMKKKKWCCCCCCCCCCCCCTTTTTGGGGGGGGGGGGGGGGGGGGGGYYYYWYYYYYYYYYYYYYSSSSSSSUEEEEEEEEEERRRRRRRRRRRQQRRRRRRRRQQQYYYYYYYNNNNNNNNNNNN',
  'SPPPPMMMMMMMMMMKKKCWWCCCCCCCCCCDTTTTTTTTIGGGGGGGGGGGGGGGGGGGYYYKYYYYYYYYYYYYYYYSSSSSSEEEEEEEEEERRRRRRRRRRRRRRQRRRRRRRGQQQQYYYYYYYYNNNNNNNNNN',
  'SPSMMMMMMMMMMMMKOOCCCCCCCCBBBBCDTTTTTTTTIGGGGGGGGGGGGGGGGGGYYYYYYYYYYYYYYYYYYYYYYSSSSIEEEEEEENRRRRRRRRRRRRRRRRRRRRRRRGGGQQYYYYYYYYNNNNNNNNNN',
  'SSSMMMMMMMMMMMMOOOOCCCCCCCBBBBBTTBTTTTTTTGGGGGGGGGGGGGGGGGGGYYYYYYYYYYYYYYYYYYYYYSIIIIIIEEEEERRRRRRRRRRRRRRYRRRRRRRGGGQQQQQQYYYYYYYNNNNNNNNN',
  'SMMMMMMMMMMMMMMMOOOOOCCCCCBBBBBBBBTTTTTPPPPGGGGGGHGGGGGGGGGGGYYYYYYYYYYYYYYYYYYIIIIIIIIIIIEAERRRRRRRRRRHHHRRRRRZZGGGGGGQQQQYYYYYYYBNNNNNNNNN',
];


function findNearFields(fields, fieldType, x, y) {
  let found = false;

  for (let i = 0; i < fields.length; i++) {
    if (fields[i].type == fieldType) {
      for (let j = 0; j < fields[i].parcels.length; j++) {
        if (fields[i].parcels[j][0] == x - 1 && fields[i].parcels[j][1] == y
          || fields[i].parcels[j][0] == x + 1 && fields[i].parcels[j][1] == y
          || fields[i].parcels[j][0] == x && fields[i].parcels[j][1] == y - 1
          || fields[i].parcels[j][0] == x && fields[i].parcels[j][1] == y + 1
        ) {
          found = true;
          fields[i].parcels.push([x, y]);
          break;
        }
      }
    }
    if (found) {
      break;
    }
  }

  if (!found) {
    fields.push({
      type: fieldType,
      parcels: [[x, y]]
    });
  }
}

function mergeClosestFields(fields) {
  for (let i = 0; i < fields.length; i++) {
    for (let j = 0; j < fields.length; j++) {
      let found = false;

      if (i != j
        && !fields[i].merged
        && !fields[j].merged
        && fields[i].type == fields[j].type
      ) {
        found = false;
        if (isNeighbor(fields[i].parcels, fields[j].parcels)) {
          fields[j].merged = true;
          fields[i].parcels = fields[i].parcels.concat(fields[j].parcels);
        }

        if (found) {
          fields[i].parcels = fields[i].parcels.concat(fields[j].parcels);
        }
      }
    }
  }

  return fields.filter(field => !field.merged);
}

function countOfNeighbors(parcel, parcels) {
  let neighbors = {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };

  for (let i = 0; i < parcels.length; i++) {
    if (parcel[0] == parcels[i][0] && parcel[1] == parcels[i][1] + 1) {
      neighbors.top++;
    }
    if (parcel[0] == parcels[i][0] - 1 && parcel[1] == parcels[i][1]) {
      neighbors.right++;
    }
    if (parcel[0] == parcels[i][0] && parcel[1] == parcels[i][1] - 1) {
      neighbors.bottom++;
    }
    if (parcel[0] == parcels[i][0] + 1 && parcel[1] == parcels[i][1]) {
      neighbors.left++;
    }
  }

  return {
    count: 4 - Object.values(neighbors).reduce((acc, neighbor) => acc + neighbor, 0),
    neighbors,
  };
}

function findNextX(parcel, parcels) {
  for (let i = 0; i < parcels.length; i++) {
    if (parcels[i][1] === parcel[1] && parcels[i][0] === parcel[0] + 1) {
      return parcels[i];
    }
  }

  return {};
}

function findNextY(parcel, parcels) {
  for (let i = 0; i < parcels.length; i++) {
    if (parcels[i][0] === parcel[0] && parcels[i][1] === parcel[1] + 1) {
      return parcels[i];
    }
  }

  return {};
}

function calculateAreaAndDistrict(fields) {
  for (let i = 0; i < fields.length; i++) {
    // area
    fields[i].area = fields[i].parcels.length;

    // district
    fields[i].district = 0;
    for (let j = 0; j < fields[i].parcels.length; j++) {
      let neighbors = countOfNeighbors(fields[i].parcels[j], fields[i].parcels);
      fields[i].district += neighbors.count;
      fields[i].parcels[j].neighbors = neighbors.neighbors;
    }

    // sides
    let cntOfSides = {
      top: {},
      right: {},
      bottom: {},
      left: {},
    };

    for (let j = 0; j < fields[i].parcels.length; j++) {
      let parcel = fields[i].parcels[j];
      let nbs = parcel.neighbors;
      let x = parcel[0];
      let y = parcel[1];

      let nextX = findNextX(parcel, fields[i].parcels).neighbors || {};
      let nextY = findNextY(parcel, fields[i].parcels).neighbors || {};

      // ha nincs felső és bal, vagy nincs felső és a következőnek van felső
      if (!cntOfSides.top[y]) cntOfSides.top[y] = 0;
      cntOfSides.top[y] += (!nbs.top && !nbs.right) || (!nbs.top && nextX.top) ? 1 : 0;

      // ha nincs jobb és alsó, vagy nincs jobb és a következőnek van jobb
      if (!cntOfSides.right[x]) cntOfSides.right[x] = 0;
      cntOfSides.right[x] += (!nbs.right && !nbs.bottom) || (!nbs.right && nextY.right) ? 1 : 0;

      // ha nincs alsó és jobb, vagy nincs alsó és a következőnek van alsó
      if (!cntOfSides.bottom[y]) cntOfSides.bottom[y] = 0;
      cntOfSides.bottom[y] += (!nbs.bottom && !nbs.right) || (!nbs.bottom && nextX.bottom) ? 1 : 0;

      // ha nincs bal és felső, vagy nincs bal és a következőnek van bal
      if (!cntOfSides.left[x]) cntOfSides.left[x] = 0;
      cntOfSides.left[x] += (!nbs.left && !nbs.bottom) || (!nbs.left && nextY.left) ? 1 : 0;
    }
    fields[i].sides = Object.values(cntOfSides).reduce((acc, side) => acc + Object.values(side).reduce((acc, cnt) => acc + cnt, 0), 0);

    // points
    fields[i].point = fields[i].area * fields[i].district;
    fields[i].point2 = fields[i].area * fields[i].sides;
  }

  return fields;
}

function isNeighbor(parcels1, parcels2) {
  for (let i = 0; i < parcels1.length; i++) {
    for (let j = 0; j < parcels2.length; j++) {
      if (parcels1[i][0] == parcels2[j][0] - 1 && parcels1[i][1] == parcels2[j][1]
        || parcels1[i][0] == parcels2[j][0] + 1 && parcels1[i][1] == parcels2[j][1]
        || parcels1[i][0] == parcels2[j][0] && parcels1[i][1] == parcels2[j][1] - 1
        || parcels1[i][0] == parcels2[j][0] && parcels1[i][1] == parcels2[j][1] + 1
      ) {
        return true;
      }
    }
  }
  return false
}

function part1(input) {
  let fields = [];

  for (let y = 0; y < input.length; y++) {
    for (let x = 0; x < input[y].length; x++) {
      let field = input[y][x];
      findNearFields(fields, field, x, y);
    }
  }

  fields = mergeClosestFields(fields);
  fields = calculateAreaAndDistrict(fields);

  return fields;
}

function part2(input) {
  input = part1(input);

  return input;
}

// console.log(part1(test_input).reduce((acc, field) => acc + field.point, 0));
console.log(part2(final_input).reduce((acc, field) => acc + field.point2, 0));